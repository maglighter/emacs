;;;;                       Emacs configuration file
;;; CORE
    (add-to-list 'load-path "~/.emacs.d/site-lisp/")
    (require 'powerline)
    (powerline-default)
;    (add-to-list 'load-path "/usr/share/emacs/23.4/lisp/emacs23-23.4+1/lisp")
    (setq tags-file-name
       "/usr/share/emacs/23.4/lisp/emacs23-23.4+1/lisp/TAGS")
    (require 'recentf)
    (require 'flymake)
    (require 'csharp-mode)
    (load "color-theme")
    (color-theme-tango)
;    (require 'session)
;    (require 'anything-match-plugin)
;    (require 'anything-config)
;    (load-file "~/.emacsfiles/cedet/common/cedet.el")
    (recentf-mode t)
    (ido-mode t)
    (setq command-line-default-directory "/home/max/")
  ;; Директории с исходным кодом
    (setq find-function-C-source-directory
	  "/usr/share/emacs/23.4/lisp/emacs23-23.4+1/src/"
	  source-directory "/usr/share/emacs/23.4/lisp/emacs23-23.4+1/lisp/")
  ;; C-x r j i вызывает файл настроек, C-x r j i - foo
    (set-register ?i '(file . "~/.emacs.d/init.el"))
    (set-register ?f '(file . "~/foo"))
    (set-register ?z '(file . "~/.zshrc"))
  ;; Отключаем меню, панель инструментов, строку прокрутки
    (tool-bar-mode nil)
    (menu-bar-mode nil)
    (scroll-bar-mode nil)
;    (blink-cursor-mode nil)
  ;; Подсветка скобок
    (show-paren-mode 1)
  ;; Отключение дополнительных действий в диалогах
    (fset 'yes-or-no-p 'y-or-n-p)
    (define-key query-replace-map [return] 'act)
  ;; Переключиться в следущее окно С-Tab
    (global-set-key (kbd "<C-tab>") 'other-window)
  ;; Делает выбранный буфер на все окно (С-x 1 <-> C-')
    (global-set-key (kbd "C-'") 'delete-other-windows)
    (global-set-key (kbd "M-'") 'delete-window)
  ;; Переключение на предыдущий выбранный буфер
    (global-set-key
      (kbd "C-;") '(lambda () (interactive) (switch-to-buffer (other-buffer))))
  ;; Перепривязка команд перехода к началу/концу буфера
    (global-set-key (kbd "M-<") 'tags-loop-continue)
    (global-set-key (kbd "M->") 'find-tag)
    (global-set-key (kbd "M-,") 'beginning-of-buffer)
    (global-set-key (kbd "M-.") 'end-of-buffer)
  ;; Убивает процесс emacs -> закрывает все окна
    (defun max-kill-emacs ()
      (interactive)
      (save-some-buffers)
;      (desktop-save-in-desktop-dir)
      (kill-emacs))
    (global-set-key (kbd "C-x c") 'max-kill-emacs)
  ;; C-. и C-x b переключение между буферами
    (global-set-key (kbd "C-.") 'iswitchb-buffer)
  ;; C-x k - убивает текущий буффер без запроса
    (global-set-key (kbd "C-x k")
		    '(lambda () (interactive) (kill-buffer (current-buffer))))
  ;; Настройка прокрутки
    (setq scroll-conservatively 50 scroll-margin 2)
  ;; end
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  ;; Удаляет текст при вставке в выделенную область
    (delete-selection-mode t)
  ;; С-h <-> Backspace
    (define-key key-translation-map [?\C-h] [?\C-?])
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Other
    (which-function-mode t)		;имя ф-ии в строке режима
    (setq redisplay-dont-pause t)
  ;; Просмоторщик man страниц
    (defalias 'man 'woman)
  ;; Интерпретатор emacs lisp'a
    (global-set-key [f6] 'ielm)
  ;; Yasnippets
;    (add-to-list 'load-path "~/.emacs.d/site-lisp/yasnippet")
;    (require 'yasnippet)
;    (yas/global-mode 1)
;    (yas/initialize)
;    (yas/load-directory "~/.emacs.d/site-lisp/yasnippet/snippets")
  ;; end
  ;; AUCTeX
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
  ;; end
  ;; Вставляет пару скобок
    (setq skeleton-pair t)
    (global-set-key "(" 'skeleton-pair-insert-maybe)
    (global-set-key "[" 'skeleton-pair-insert-maybe)
    (global-set-key "{" 'skeleton-pair-insert-maybe)
    (global-set-key "\"" 'skeleton-pair-insert-maybe)
  ;; end
  ;; Iswitch
    (iswitchb-mode t)
    (add-to-list 'iswitchb-buffer-ignore "*GNU Emacs*")
    (add-to-list 'iswitchb-buffer-ignore "*Messages*")
    (add-to-list 'iswitchb-buffer-ignore "*Backtrace")
    (add-to-list 'iswitchb-buffer-ignore "*Quail Com")
    (add-to-list 'iswitchb-buffer-ignore "*Buffer")
    (add-to-list 'iswitchb-buffer-ignore "*fsm-debug")
    (add-to-list 'iswitchb-buffer-ignore "*Completions")
    (add-to-list 'iswitchb-buffer-ignore "^[tT][aA][gG][sS]$")
  ;; Включаем session manager
;    (add-hook 'after-init-hook 'session-initialize)
  ;; максимальный размер Messages 2000 строк
    (setq message-log-max 2000)
  ;; Концом предложения считается точка и сдедующий за ним пробел
    (setq sentence-end "[.?!][]\"’)]*\\($\\|\t\\| \\)[ \t\n]*")
  ;; *C--*, *C-+* уменьшают и увеличивают размер шрифта
    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C--") 'text-scale-decrease)
  ;; *Shift* со *стрелками* используется для перехода между окнами
    (windmove-default-keybindings)
  ;; игнорировать регистр
    (setq case-replace nil)
  ;; C-c r - заменяет соответствия с regexp выражением
    (global-set-key (kbd "C-c r") 'query-replace-regexp)
  ;; backup files in one directory
    (setq
       backup-by-copying t      ; don't clobber symlinks
       backup-directory-alist
	 '(("." . "~/.emacs.d/backup"))  ; don't litter my fs tree
       auto-save-file-name-transforms
         `((".*" ,"~/.emacs.d/backup" t))
       delete-old-versions t
       kept-new-versions 8
       kept-old-versions 2
       version-control t)       ; use versioned backups

  (defun force-backup-of-buffer ()
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (add-hook 'before-save-hook  'force-backup-of-buffer)
  ;; end
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Aliases
    (defalias 'cc 'calc)
    (defalias 'eb 'eval-buffer)
    (defalias 'er 'eval-region)
    (defalias 'ee 'eval-expression)
    (defalias 'qr 'query-replace)
    (defalias 'qrr 'query-replace-regexp)
    (defalias 'lm 'linum-mode)
    (defalias 'wsm 'whitespace-mode)
    (defalias 'sh 'shell-command)
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Encoding
  ;; Использовать окружение UTF-8
    (set-language-environment 'UTF-8)
  ;; UTF-8 для вывода на экран
    (set-terminal-coding-system 'utf-8)
  ;; UTF-8 для ввода с клавиатуры
    (set-keyboard-coding-system 'utf-8)
  ;; UTF-8 для работы с буфером обмена X (не работает в emacs 21!)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
    (setq x-select-enable-clipboard t)
    (define-coding-system-alias 'windows-1251 'cp1251)
    (prefer-coding-system 'koi8-r-unix)
    (prefer-coding-system 'windows-1251-dos)
    (prefer-coding-system 'utf-8-unix)
  ;; Клавиатурная раскладка "как в Windows")
    (setq default-input-method 'russian-computer)
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Useful function
  ;; Отредактировать системные файлы от имени суперпользователя
    (defun sudo-edit (&optional arg)
    (interactive "p")
    (if arg
	(find-file
	 (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file
       (concat "/sudo:root@localhost:" buffer-file-name))))
  ;; Находит файлы, которые редактировались в прошлый раз
    (defun recentf-ido-find-file ()
      "Find a recent file using ido."
      (interactive)
      (let ((file
	     (ido-completing-read "Choose recent file: " recentf-list nil t)))
       (when file
	 (find-file file))))

    (global-set-key (kbd "C-,") 'recentf-ido-find-file)
  ;; end
  ;; C-w теперь удаляет предыдущее слово, если не выделена область
    (defun backward-kill-word-or-kill-region (arg)
      (interactive "p")
      (if (region-active-p)
	  (kill-region (region-beginning)
		       (region-end))
        (backward-kill-word arg)))

    (global-set-key (kbd "C-w") 'backward-kill-word-or-kill-region)

    (define-key minibuffer-local-map
      (kbd "C-w") 'backward-kill-word-or-kill-region)

    (add-hook 'ido-setup-hook
	      (lambda ()
		(define-key ido-completion-map
		  (kbd "C-w") 'ido-delete-backward-word-updir)))
  ;; end
  ;; Если последнее действие не было вставкой, запуск просмотра kill ring'а
  (defadvice yank-pop (around kill-ring-browse-maybe (arg))
       "If last action was not a yank, run `browse-kill-ring' instead."
       (if (not (eq last-command 'yank))
           (browse-kill-ring)
         ad-do-it))

     (ad-activate 'yank-pop)
  ;; end
  ;; Перевод слова
    (defun max-translate ()
      (interactive)
      (setq myStr (thing-at-point 'word))
      (shell-command (concat "echo \"" myStr " -" "\" \"\$(wget -U \"Mozilla/5.0\" -qO - \"http://translate.google.com/translate_a/t?client=t&text=\$(echo \"" myStr "\" | sed \"s/[\\\"'<>]//g\")&sl=en&tl=ru\" | sed 's/\\[\\[\\[\\\"//' | cut -d \\\" -f 1)\"")))

    (global-set-key (kbd "C-x t") 'max-translate)
  ;; end
  ;; Конвертирует файл в кодировку utf-8
    (defun dos2unix ()
       (interactive)
       (set-buffer-file-coding-system 'utf-8-unix))
  ;; end
  ;; Eshell настройки
    (setq eshell-history-size 99999)
    (setq eshell-history-file-name "/home/max/.histfile")
    (global-set-key (kbd "C-x m") 'eshell)
    (setq eshell-cmpl-cycle-completions nil
	  ehsell-save-history-on-exit t
	  eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")

    (eval-after-load 'esh-opt
      '(progn
	 (require 'em-prompt)
	 (require 'em-term)
	 (require 'em-cmpl)
	 (setenv "PAGER" "cat")
	 (set-face-attribute 'eshell-prompt nil :foreground "turquoise1")
	 (when (< emacs-major-version 23)
	   (add-hook 'eshell-mode-hook
		     '(lambda ()
			(define-key eshell-mode-map "\C-a" 'eshell-bol)))
	   (add-to-list 'eshell-output-filter-functions
			'eshell-handle-ansi-color))

	 ;; TODO: submit these via M-x report-emacs-bug
	 (add-to-list 'eshell-visual-commands "ssh")
	 (add-to-list 'eshell-visual-commands "tail")
	 (add-to-list 'eshell-command-completions-alist
		      '("gunzip" "gz\\'"))
	 (add-to-list 'eshell-command-completions-alist
		      '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))))

    (defun eshell/cds ()
      "Change directory to the project's root."
      (eshell/cd (locate-dominating-file default-directory "src")))

    (defun eshell/find (dir &rest opts)
      (find-dired dir (mapconcat 'identity opts " ")))
  ;; end
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Slime
    (setq auto-mode-alist
	  (append '(("\\.lisp$"   . lisp-mode)
		    ("\\.lsp$"    . lisp-mode)
		    ("\\.cl$"     . lisp-mode)
		    ("\\.asd$"    . lisp-mode)
		    ("\\.system$" . lisp-mode))
		  auto-mode-alist))
    (add-hook 'lisp-mode-hook
	      (lambda ()
		(setq lisp-indent-function 'common-lisp-indent-function)
		(setq show-trailing-whitespace t)))

    (load (expand-file-name "~/quicklisp/slime-helper.el"))
    (require 'slime)
    (slime-setup '(slime-fancy slime-indentation slime-tramp slime-asdf slime-sprof))
    (setq slime-net-coding-system 'utf-8-unix)
    (setq slime-default-lisp 'sbcl)
    (setq slime-lisp-implementations
	  `((sbcl ("/usr/bin/sbcl") :coding-system utf-8-unix)))
    (eval-after-load 'slime
      '(progn
	 (setq slime-scratch-file "~/.emacs.d/tmp/scratch.lisp")
	 (setq slime-edit-definition-fallback-function 'find-tag)
	 (setq slime-complete-symbol*-fancy t)
	 (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
	 (setq slime-when-complete-filename-expand t)
	 (setq slime-truncate-lines nil)
	 (setq slime-autodoc-use-multiline-p t)
	 (slime-autodoc-mode)))
    (add-hook 'lisp-mode-hook
	      (lambda ()
		(setq slime-use-autodoc-mode t)))
    (defun my/customized-lisp-keyboard ()
      (define-key slime-repl-mode-map (kbd "C-c ;") 'slime-insert-balanced-comments)
      (local-set-key [C-c tab] 'slime-fuzzy-complete-symbol)
      (local-set-key [return] 'newline-and-indent))
    (add-hook 'lisp-mode-hook 'my/customized-lisp-keyboard)

    (global-set-key [f5] 'slime)
    (global-set-key [(control f5)] 'slime-selector)
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Cpp
    (setq max-gdb-process ""
	  max-buffer-name "")
    (add-hook 'gdb-mode-hook '(lambda ()
      (setq max-gdb-process
	    (substring (buffer-name) 1 (- (length (buffer-name)) 1)))))
  ;; При включении c++-mode -> стиль "BSD", C-c C-c - авто-компиляция
    (add-hook 'c++-mode-hook '(lambda ()
      (c-set-style "bsd")
      (setq c-basic-offset 4)
      (setq compile-command "g++ ")
  ;;включает режим авто вставки переносов строк (после ;), С-с С-а
      ;(c-toggle-auto-state t)
      (local-set-key (kbd "C-c C-r") 'gud-run)
  ;;будет выполняться после завершения компиляции
      (defun max-cpp-notify-compilation-result(buffer msg)
	(interactive)
	(other-window -1)
	(if (string-match "^finished" msg)
	    (progn
	      (gdb (concat "gdb -silent --annotate=3 " max-buffer-name))
	      (insert "r")
	      (comint-send-input))))

      (add-to-list 'compilation-finish-functions
		   'max-cpp-notify-compilation-result)

      (defun max-cpp-compile-and-run ()
	(interactive)
	(save-buffer)
	(setq max-buffer-name
	      (substring (buffer-name) 0 (- (length (buffer-name)) 4)))
	(if (not (eql max-gdb-process ""))
	    (progn
	      (if (get-buffer (concat "*" max-gdb-process "*"))
		  (if (shell-command "killall gdb")
		      (kill-buffer (concat "*" max-gdb-process "*"))))
	      (setq max-gdb-process "")))
	(delete-other-windows)
	(split-window-horizontally)
	(enlarge-window-horizontally 12)
	(compile (concat "g++ -g " max-buffer-name ".cpp -o " max-buffer-name)))
      (local-set-key (kbd "C-c r") 'gdb)
      (local-set-key (kbd "C-c c") 'comment-region)
      (local-set-key (kbd "C-c C-c") 'max-cpp-compile-and-run)))
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Csharp
    (setq max-csharp-add-to-command "")
    (defun max-csharp-mode-fn ()
      "function that runs when csharp-mode is initialized for a buffer."
      (c-set-style "bsd")
      (setq c-basic-offset 4)
      (setq compile-command "gmcs ")
  ;;будет выполняться после завершения компиляции
      (defun max-csharp-notify-compilation-result(buffer msg)
	(interactive)
	(other-window -1)
	(if (string-match "^finished" msg)
	    (progn
	      (eshell)
	      (insert (concat "mono " max-buffer-name ".exe"))
	      (eshell-send-input))))

      (add-to-list 'compilation-finish-functions
		   'max-csharp-notify-compilation-result)

      (defun max-csharp-compile-and-run ()
	(interactive)
	(save-buffer)
	(setq max-buffer-name
	      (substring (buffer-name) 0 (- (length (buffer-name)) 3)))
	(delete-other-windows)
	(split-window-horizontally)
	(enlarge-window-horizontally 12)
	(compile
	 (concat "gmcs " max-buffer-name ".cs " max-csharp-add-to-command)))

      (local-set-key (kbd "C-c c") 'comment-region)
      (local-set-key (kbd "C-c C-c") 'max-csharp-compile-and-run))

    (add-hook  'csharp-mode-hook 'max-csharp-mode-fn t)
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Perl
    (defalias 'perl-mode 'cperl-mode)
    (mapc
     (lambda (pair)
       (if (eq (cdr pair) 'perl-mode)
	   (setcdr pair 'cperl-mode)))
      (append auto-mode-alist interpreter-mode-alist))

    (defun perl-new-source-max (name)
      (interactive "sEnter new perl source file name: ")
      (find-file (concat "/home/max/src/perl/" name))
      (insert "#!/usr/bin/perl -w\n")
      (cperl-mode)
      (save-buffer)
      (shell-command (concat "chmod +x " name)))
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;;; Java
    (setq max-java-add-to-command "")
    (defun max-java-mode-fn ()
      "function that runs when java-mode is initialized for a buffer."
      (c-set-style "bsd")
      (setq c-basic-offset 4)
      (setq compile-command "javac ")
  ;;будет выполняться после завершения компиляции
      (defun max-java-notify-compilation-result(buffer msg)
	(interactive)
	(other-window -1)
	(if (string-match "^finished" msg)
	    (progn
	      (eshell)
	      (eshell-send-input)
	      (insert (concat "java " max-buffer-name))
	      (eshell-send-input))))

      (add-to-list 'compilation-finish-functions
		   'max-java-notify-compilation-result)

      (defun max-java-compile-and-run ()
	(interactive)
	(save-buffer)
	(setq max-buffer-name
	      (substring (buffer-name) 0 (- (length (buffer-name)) 5)))
	(delete-other-windows)
	(split-window-horizontally)
	(enlarge-window-horizontally 12)
	(compile
	 (concat "javac " max-buffer-name ".java " max-java-add-to-command)))

      (local-set-key (kbd "C-c c") 'comment-region)
      (local-set-key (kbd "C-c C-c") 'max-java-compile-and-run))

    (add-hook  'java-mode-hook 'max-java-mode-fn t)
;;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    (put 'scroll-left 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'narrow-to-region 'disabled nil)

;;; NEW code

;TODO: imenu